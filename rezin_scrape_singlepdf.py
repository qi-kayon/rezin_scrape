# -*- coding: utf-8 -*-
"""Rezin_Scrape_singlePDF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qbP4nwQTPdqmAlm232f2N8htDom4JTYZ
"""

import requests
import io
import PyPDF2
import pandas as pd
from datetime import datetime

def download_pdf(url):
    response = requests.get(url)
    if response.status_code == 200:
        print(f"Successfully downloaded PDF from {url}")
        return io.BytesIO(response.content)
    else:
        print(f"Failed to download PDF from {url}. Status code: {response.status_code}")
        return None

def extract_text_from_pdf(pdf_file):
    reader = PyPDF2.PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

def extract_table_from_text(text):
    lines = text.split('\n')
    table_data = []
    headers = ["MMTC Name", "Dispensing Locations", "Medical Marijuana (mgs THC)",
               "Low-THC Cannabis (mgs CBD)", "Marijuana in a Form for Smoking (oz)"]

    for i, line in enumerate(lines):
        if "Trulieve" in line:  # Start of the table data
            for j in range(i, len(lines)):
                parts = lines[j].split()
                if len(parts) >= 5 and parts[0] != "Total":
                    try:
                        smoking = float(parts[-1].replace(',', ''))
                        low_thc = int(parts[-2].replace(',', ''))
                        medical_marijuana = int(parts[-3].replace(',', ''))
                        locations = int(parts[-4])
                        mmtc_name = " ".join(parts[:-4])
                        table_data.append([mmtc_name, locations, medical_marijuana, low_thc, smoking])
                        print(f"Processed row: {mmtc_name}")
                    except ValueError as e:
                        print(f"Error processing line {j}: {e}")
                        print(f"Line content: {lines[j]}")
                elif "Total" in lines[j]:
                    print(f"Table end found on line {j}: {lines[j]}")
                    break
            break  # Exit the outer loop once we've processed the table

    print(f"Extracted {len(table_data)} rows of data")
    return headers, table_data

def process_data(data, headers, report_date):
    if not data:
        print("No data to process")
        return None
    df = pd.DataFrame(data, columns=headers)
    df['Report Date'] = report_date
    return df

def process_single_report(url, report_date):
    pdf_file = download_pdf(url)
    if pdf_file:
        pdf_text = extract_text_from_pdf(pdf_file)
        headers, table_data = extract_table_from_text(pdf_text)
        if table_data:
            return process_data(table_data, headers, report_date)
        else:
            print("No data extracted from PDF")
            return None
    else:
        print("Failed to download PDF")
        return None

# Main execution
if __name__ == "__main__":
    url = "https://knowthefactsmmj.com/wp-content/uploads/ommu_updates/2024/090624-OMMU-Update.pdf"
    report_date = datetime(2024, 9, 6)

    processed_data = process_single_report(url, report_date)
    if processed_data is not None:
        print("\nProcessed data shape:", processed_data.shape)
        print("\nSample of processed data:")
        print(processed_data.head())

        # Optionally, save to CSV
        processed_data.to_csv('latest_cannabis_data.csv', index=False)
        print("\nData saved to 'latest_cannabis_data.csv'")
    else:
        print("Failed to process the report")

